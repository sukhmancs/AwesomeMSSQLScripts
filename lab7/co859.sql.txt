/*I, Sukhmanjeet Singh, student number 000838215, certify that this material is my original work. No other person's work has been used without due acknowledgment and I have not made my work available to anyone else.*/
/*******************************************************
Script: co859.txt
Author: Sukhmanjeet Singh
Date: November 21, 2023
Description: Create co859 Database objects for Sukhman's outdoor solutions and create three triggers for INSERT, UPDATE, DELETE
********************************************************/

-- Setting NOCOUNT ON suppresses completion messages for each INSERT
SET NOCOUNT ON

-- Set date format to year, month, day
SET DATEFORMAT ymd;

-- Make the master database the current database
USE master

-- If database co859 exists, drop it
IF EXISTS (SELECT * FROM sysdatabases WHERE name = 'co859')
BEGIN
  ALTER DATABASE co859 SET SINGLE_USER WITH ROLLBACK IMMEDIATE;
  DROP DATABASE co859;
END
GO

-- Create the co859 database
CREATE DATABASE co859;
GO

-- Make the co859 database the current database
USE co859;

-- Create landscaping_services table
CREATE TABLE landscaping_services (
  service_id INT PRIMARY KEY, 
  service_description VARCHAR(30), 
  service_type CHAR(1) CHECK (service_type IN ('D', 'G', 'C')), 
  hourly_rate MONEY,
  sales_ytd MONEY); 

-- Create sales table
CREATE TABLE sales (
	sales_id INT PRIMARY KEY, 
	sales_date DATE, 
	amount MONEY, 
	service_id INT FOREIGN KEY REFERENCES landscaping_services(service_id));
GO

-- Insert landscaping_services records
INSERT INTO landscaping_services VALUES (10, 'Design', 'D', 50, 340);
INSERT INTO landscaping_services VALUES (20, 'Lawn Care', 'C', 120, 240);
INSERT INTO landscaping_services VALUES (30, 'Gardening', 'G', 150, 700);
INSERT INTO landscaping_services VALUES (40, 'Hardscape Constructions ', 'G', 110, 430);
INSERT INTO landscaping_services VALUES (50, 'Cleaning', 'C', 70, 240);

-- Insert sales records
INSERT INTO sales VALUES (1, '2023-09-19', 50, 10);
INSERT INTO sales VALUES (2, '2023-09-20', 150, 30);
INSERT INTO sales VALUES (3, '2023-09-21', 120, 10);
INSERT INTO sales VALUES (4, '2023-09-22', 300, 40);
INSERT INTO sales VALUES (5, '2023-09-23', 70, 50);
INSERT INTO sales VALUES (6, '2023-09-24', 120, 20);
INSERT INTO sales VALUES (7, '2023-09-25', 150, 30);
INSERT INTO sales VALUES (8, '2023-09-26', 70, 10);
INSERT INTO sales VALUES (9, '2023-09-27', 120, 20);
INSERT INTO sales VALUES (10, '2023-09-28', 90, 50);
INSERT INTO sales VALUES (11, '2023-09-29', 50, 10);
INSERT INTO sales VALUES (12, '2023-09-30', 400, 30);
INSERT INTO sales VALUES (13, '2023-10-01', 50, 10);
INSERT INTO sales VALUES (14, '2023-10-02', 130, 40);
INSERT INTO sales VALUES (15, '2023-10-03', 80, 50);
GO

-- Create Index on column service_description
CREATE INDEX IX_landscaping_services_service_description
ON landscaping_services (service_description);
GO

-- Create View for landscaping_services master table  
CREATE VIEW high_end_landscaping_services 
AS
SELECT SUBSTRING(service_description, 1, 15) AS description, sales_ytd
FROM landscaping_services
WHERE hourly_rate >
(SELECT AVG(hourly_rate)
 FROM landscaping_services);
GO

-- Create a new table to verify inserts
CREATE TABLE verify (
  table_name varchar(30), 
  actual INT, 
  expected INT);
GO

-- Verify inserts
INSERT INTO verify VALUES('landscaping_services', (SELECT COUNT(*) FROM landscaping_services), 5);
INSERT INTO verify VALUES('sales', (SELECT COUNT(*) FROM sales), 15);
PRINT 'Verification';
SELECT table_name, actual, expected, expected - actual discrepancy FROM verify;
DROP TABLE verify;
GO

-- After an INSERT of a sales row, UPDATE the "year to date sales” value in the associated row in the master table.
CREATE TRIGGER sales_insert
ON sales
AFTER INSERT
AS
BEGIN 
UPDATE landscaping_services
SET sales_ytd = sales_ytd + 
				(SELECT SUM(amount)
				 FROM inserted
				 WHERE landscaping_services.service_id = inserted.service_id)
WHERE landscaping_services.service_id IN (SELECT service_id FROM inserted)
END;
GO

-- After an UPDATE of a sales row, UPDATE the "year to date sales" value in the associated row in the master table.
CREATE TRIGGER sales_update
ON sales
AFTER UPDATE
AS 
UPDATE landscaping_services
SET sales_ytd = sales_ytd + 
				(SELECT SUM(amount)
				 FROM inserted
				 WHERE landscaping_services.service_id = inserted.service_id) -
				(SELECT SUM(amount)
				 FROM deleted
				 WHERE landscaping_services.service_id = deleted.service_id)
WHERE landscaping_services.service_id IN (SELECT service_id FROM inserted);
GO

-- After an DELETE of a sales row, UPDATE the "year to date sales" value in the associated row in the master table.
CREATE TRIGGER sales_delete
ON sales
AFTER DELETE
AS
UPDATE landscaping_services
SET sales_ytd = sales_ytd - 
				(SELECT SUM(amount) 
				 FROM deleted
				 WHERE landscaping_services.service_id = deleted.service_id)
WHERE landscaping_services.service_id IN (SELECT service_id FROM deleted);
GO

-- Verification
PRINT 'Verify triggers'
PRINT 'Master Table Before Changes'
SELECT * 
FROM landscaping_services;

-- INSERT a row into the sales table (ensure transaction amount is not zero, pick a large or unusual amount)
INSERT INTO sales VALUES (16, '2023-10-03', 100, 50);
INSERT INTO sales VALUES (17, '2023-10-03', 100, 50);
INSERT INTO sales VALUES (18, '2023-10-03', 100, 40);
PRINT 'After INSERT'
SELECT *
FROM landscaping_services;

-- UPDATE the transaction amount in one row in the sales table (ensure transaction amount is not zero, pick a large or unusual amount, this will make it stand out in the output)
UPDATE sales
SET amount = 200
WHERE sales.sales_id = 18;
PRINT 'After UPDATE'
SELECT * 
FROM landscaping_services;

-- DELETE the row that just got inserted in the sales table
DELETE FROM sales WHERE sales_id IN (16, 17, 18)
PRINT 'After DELETE'
SELECT * 
FROM landscaping_services